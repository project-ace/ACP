.TH "acpcl" 3 "Thu Jun 8 2017" "Version 3.0.0" "ACP Library" \" -*- nroff -*-
.ad l
.nh
.SH NAME
acpcl \- ACP Middle Layer Communication Library
.SS "Typedefs"

.in +1c
.ti -1c
.RI "typedef struct chreqitem * \fBacp_request_t\fP"
.br
.ti -1c
.RI "typedef struct chitem * \fBacp_ch_t\fP"
.br
.ti -1c
.RI "typedef struct segbufitem * \fBacp_segbuf_t\fP"
.br
.in -1c
.SS "Functions"

.in +1c
.ti -1c
.RI "acp_segbuf_t \fBacp_create_src_segbuf\fP (int dst_rank, void *buf, size_t segsize, size_t segnum)"
.br
.RI "Creates the source side endpoint of a pair of segmented buffers\&. "
.ti -1c
.RI "acp_segbuf_t \fBacp_create_dst_segbuf\fP (int dst_rank, void *buf, size_t segsize, size_t segnum)"
.br
.RI "Creates the destination side endpoint of a pair of segmented buffers\&. "
.ti -1c
.RI "int \fBacp_connect_segbuf\fP (acp_segbuf_t segbuf)"
.br
.RI "Connect the pair of segmented buffer\&. "
.ti -1c
.RI "int \fBacp_isconnected_segbuf\fP (acp_segbuf_t segbuf)"
.br
.RI "Query if the pair of segmented buffer are connected\&. "
.ti -1c
.RI "int \fBacp_ready_segbuf\fP (acp_segbuf_t segbuf)"
.br
.RI "Notify to the source side that one segment has become ready to be overwritten\&. "
.ti -1c
.RI "int \fBacp_ack_segbuf\fP (acp_segbuf_t segbuf)"
.br
.RI "Acknowledge the destination side that one segment has become available to retrieve\&. "
.ti -1c
.RI "int \fBacp_isready_segbuf\fP (acp_segbuf_t segbuf)"
.br
.RI "Query if there is any segments that are ready to be overwritten\&. "
.ti -1c
.RI "int \fBacp_isacked_segbuf\fP (acp_segbuf_t segbuf)"
.br
.RI "Query if there is any segments that are available to be retrieved\&. "
.ti -1c
.RI "int64_t \fBacp_query_segbuf_head\fP (acp_segbuf_t segbuf)"
.br
.RI "Query the head index of the segmented buffer\&. "
.ti -1c
.RI "int64_t \fBacp_query_segbuf_tail\fP (acp_segbuf_t segbuf)"
.br
.RI "Query the tail index of the segmented buffer\&. "
.ti -1c
.RI "int64_t \fBacp_query_segbuf_sent\fP (acp_segbuf_t segbuf)"
.br
.RI "Query the index that represents the point where data has been already sent\&. "
.ti -1c
.RI "int \fBacp_disconnect_segbuf\fP (acp_segbuf_t segbuf)"
.br
.RI "Disconnect a segmented buffer\&. "
.ti -1c
.RI "int \fBacp_free_segbuf\fP (volatile acp_segbuf_t segbuf)"
.br
.RI "Free the endpoint of a segmented buffer\&. "
.ti -1c
.RI "acp_ch_t \fBacp_create_ch\fP (int sender, int receiver)"
.br
.RI "Creates an endpoint of a channel to transfer messages from sender to receiver\&. "
.ti -1c
.RI "int \fBacp_free_ch\fP (acp_ch_t ch)"
.br
.RI "Frees the endpoint of the channel specified by the handle\&. "
.ti -1c
.RI "acp_request_t \fBacp_nbfree_ch\fP (acp_ch_t ch)"
.br
.RI "Starts a nonblocking free of the endpoint of the channel specified by t he handle\&. "
.ti -1c
.RI "acp_request_t \fBacp_nbsend_ch\fP (acp_ch_t ch, void *buf, size_t size)"
.br
.RI "Non-Blocking send via channels\&. "
.ti -1c
.RI "acp_request_t \fBacp_nbrecv_ch\fP (acp_ch_t ch, void *buf, size_t size)"
.br
.RI "Non-Blocking receive via channels\&. "
.ti -1c
.RI "size_t \fBacp_wait_ch\fP (acp_request_t request)"
.br
.RI "Waits for the completion of the nonblocking operation\&. "
.ti -1c
.RI "int \fBacp_waitall_ch\fP (acp_request_t *request, int, size_t *)"
.br
.in -1c
.SH "Detailed Description"
.PP 
This library provides \fIChannel\fP interface and \fIcollective\fP communication interface\&.
.PP
\&.\&.\&.\&.\&.\&.\&.\&.\&. 
.SH "Function Documentation"
.PP 
.SS "int acp_ack_segbuf (acp_segbuf_t segbuf)"

.PP
Acknowledge the destination side that one segment has become available to retrieve\&. Send an acknowledgement from the source side to the destination side that one segment has become available to be retrieved at the destination side\&. This function increments the tail of the segmented bffer by one\&.
.PP
\fBParameters:\fP
.RS 4
\fIsegbuf\fP Handle of the segmented buffer\&. 
.RE
.PP
\fBReturn values:\fP
.RS 4
\fI0\fP Success\&. 
.br
\fI1\fP Fail 
.RE
.PP

.SS "int acp_connect_segbuf (acp_segbuf_t segbuf)"

.PP
Connect the pair of segmented buffer\&. Connect the end point of the pair of segmented buffers with the other end\&. This function is blocking, which waits for the completion of the connection\&. Segmented data transfer with the specified handle becomes available after this function\&.
.PP
\fBParameters:\fP
.RS 4
\fIsegbuf\fP Handle of the segmented buffer\&. 
.RE
.PP
\fBReturn values:\fP
.RS 4
\fI0\fP Success 
.br
\fI1\fP Fail 
.RE
.PP

.SS "acp_ch_t acp_create_ch (int sender, int receiver)"

.PP
Creates an endpoint of a channel to transfer messages from sender to receiver\&. Creates an endpoint of a channel to transfer messages from sender to receiver, and returns a handle of it\&. It returns error if sender and receiver is same, or the caller process is neither the sender nor the receiver\&. This function does not wait for the completion of the connection between sender and receiver\&. The connection will be completed by the completion of the communication through this channel\&. There can be more than one channels for the same sender-receiver pair\&.
.PP
\fBParameters:\fP
.RS 4
\fIsender\fP Rank of the sender process of the channel\&. 
.br
\fIreceiver\fP Rank of the receiver process of the channel\&. 
.RE
.PP
\fBReturn values:\fP
.RS 4
\fIACP_CH_NULL\fP fail 
.br
\fIotherwise\fP A handle of the endpoint of the channel\&. 
.RE
.PP

.SS "acp_segbuf_t acp_create_dst_segbuf (int dst_rank, void * buf, size_t segsize, size_t segnum)"

.PP
Creates the destination side endpoint of a pair of segmented buffers\&. Creates the destination side end point of a pair of segmented buffers\&. It returns error if the values of the parameters are invalid\&. The source rank (dst_rank) cannot be the rank itself\&. Also, it returns error if the internal resource for connecting segmented buffers is not sufficient\&. Otherwise, it returns a handle of the segmented buffer\&. This function just prepares the local side of the segmented buffer\&. Connection of the source and the destination side of the segmented buffer should be done explicitly, after this function\&. There can be more than one segmented buffers with the same source rank\&.
.PP
\fBParameters:\fP
.RS 4
\fIsrc_rank\fP Rank of the source process of the pair of segmented buffer\&. 
.br
\fIbuf\fP Local buffer for this endpoint\&. Provided from the application\&. 
.br
\fIsegsize\fP Size of the segment\&. 
.br
\fIsegnum\fP Number of segments in a buffer\&. 
.RE
.PP
\fBReturn values:\fP
.RS 4
\fIACP_SEGBUF_NULL\fP Fail 
.br
\fIotherwise\fP A handle of the endpoint of the segmented buffer\&. 
.RE
.PP

.SS "acp_segbuf_t acp_create_src_segbuf (int dst_rank, void * buf, size_t segsize, size_t segnum)"

.PP
Creates the source side endpoint of a pair of segmented buffers\&. Creates the source side end point of a pair of segmented buffers\&. It returns error if the values of the parameters are invalid\&. The destination rank (dst_rank) cannot be the rank it self\&. Also, it returns error if the internal resource for connecting segmented buffers is not sufficient\&. Otherwise, it returns a handle of the segmented buffer\&. This function just prepares the local side of the segmented buffer\&. Connection of the source and the destination side of the segmented buffer should be done explicitly, after this function\&. There can be more than one segmented buffers with the same destination rank\&.
.PP
\fBParameters:\fP
.RS 4
\fIdst_rank\fP Rank of the destination process of the pair of segmented buffer\&. 
.br
\fIbuf\fP Local buffer for this endpoint\&. Provided from the application\&. 
.br
\fIsegsize\fP Size of the segment\&. 
.br
\fIsegnum\fP Number of segments in a buffer\&. 
.RE
.PP
\fBReturn values:\fP
.RS 4
\fIACP_SEGBUF_NULL\fP fail 
.br
\fIotherwise\fP A handle of the endpoint of the segmented buffer\&. 
.RE
.PP

.SS "int acp_disconnect_segbuf (acp_segbuf_t segbuf)"

.PP
Disconnect a segmented buffer\&. Disconnect the segmented buffer specfied by segbuf\&. After this function, the specified segmented buffer cannot be used\&.
.PP
\fBParameters:\fP
.RS 4
\fIsegbuf\fP Handle of the segmented buffer\&. 
.RE
.PP
\fBReturn values:\fP
.RS 4
\fI0\fP Success 
.br
\fI1\fP Fail 
.RE
.PP

.SS "int acp_free_ch (acp_ch_t ch)"

.PP
Frees the endpoint of the channel specified by the handle\&. Frees the endpoint of the channel specified by the handle\&. It waits for the completion of negotiation with the counter peer of the channel for disconnection\&. It returns error if the caller process is neither the sender nor the receiver\&. Behavior of the communication with the handle of the channel endpoint that has already been freed is undefined\&.
.PP
\fBParameters:\fP
.RS 4
\fIch\fP Handle of the channel endpoint to be freed\&. 
.RE
.PP
\fBReturn values:\fP
.RS 4
\fI0\fP Success 
.br
\fI-1\fP Fail 
.RE
.PP

.SS "int acp_free_segbuf (volatile acp_segbuf_t segbuf)"

.PP
Free the endpoint of a segmented buffer\&. Free the endpoint of the segmented buffer specified by segbuf\&. Before this function, the endpoint must be disconnected\&.
.PP
\fBParameters:\fP
.RS 4
\fIsegbuf\fP Handle of the segmented buffer\&. 
.RE
.PP
\fBReturn values:\fP
.RS 4
\fI0\fP Success 
.br
\fI1\fP Fail 
.RE
.PP

.SS "int acp_isacked_segbuf (acp_segbuf_t segbuf)"

.PP
Query if there is any segments that are available to be retrieved\&. Check if there is any segments that are available to be retrieved by the destination rank\&.
.PP
\fBParameters:\fP
.RS 4
\fIsegbuf\fP Handle of the segmented buffer\&. 
.RE
.PP
\fBReturn values:\fP
.RS 4
\fI0\fP The segmented buffer is connected\&. 
.br
\fI1\fP The segmented buffer is not connected\&. 
.RE
.PP

.SS "int acp_isconnected_segbuf (acp_segbuf_t segbuf)"

.PP
Query if the pair of segmented buffer are connected\&. Check the connection between the source and the destination of the pair of segmented buffers\&.
.PP
\fBParameters:\fP
.RS 4
\fIsegbuf\fP Handle of the segmented buffer\&. 
.RE
.PP
\fBReturn values:\fP
.RS 4
\fI0\fP The segmented buffer is connected\&. 
.br
\fI1\fP The segmented buffer is not connected\&. 
.RE
.PP

.SS "int acp_isready_segbuf (acp_segbuf_t segbuf)"

.PP
Query if there is any segments that are ready to be overwritten\&. Check if there is any segments that are ready to be overwritten\&.
.PP
\fBParameters:\fP
.RS 4
\fIsegbuf\fP Handle of the segmented buffer\&. 
.RE
.PP
\fBReturn values:\fP
.RS 4
\fI0\fP There is at least one segment ready to be overwritten\&. 
.br
\fI1\fP There is no ready segment\&. 
.RE
.PP

.SS "acp_request_t acp_nbfree_ch (acp_ch_t ch)"

.PP
Starts a nonblocking free of the endpoint of the channel specified by t he handle\&. It returns error if the caller process is neither the sender nor the receiver\&. Otherwise, it returns a handle of the request for waiting the completion of the free operation\&. Communication with the handle of the channel endpoint that has been started to be freed causes an error\&.
.PP
\fBParameters:\fP
.RS 4
\fIch\fP Handle of the channel endpoint to be freed\&. 
.RE
.PP
\fBReturn values:\fP
.RS 4
\fIACP_REQUEST_NULL\fP Fail 
.br
\fIotherwise\fP A handle of the request for waiting the completion of this operation\&. 
.RE
.PP

.SS "acp_request_t acp_nbrecv_ch (acp_ch_t ch, void * buf, size_t size)"

.PP
Non-Blocking receive via channels\&. Starts a nonblocking receive of a message through the channel specified by the handle\&. It returns error if the receiver of the channel endpoint specified by the handle is not the caller process\&. Otherwise, it returns a handle of the request for waiting the completion of the nonblocking receive\&. If the message is smaller than the size of the receive buffer, only the region of the message size, starting from the initial address of the receive buffer is modified\&. If the message is larger than the size of the receive buffer, the exceeded part of the message is discarded\&.
.PP
\fBParameters:\fP
.RS 4
\fIch\fP Handle of the channel endpoint to receive a message\&. 
.br
\fIbuf\fP Initial address of the receive buffer\&. 
.br
\fIsize\fP Size in byte of the receive buffer\&. 
.RE
.PP
\fBReturn values:\fP
.RS 4
\fIACP_REQUEST_NULL\fP Fail 
.br
\fIotherwise\fP a handle of the request for waiting the completion of this operation\&. 
.RE
.PP

.SS "acp_request_t acp_nbsend_ch (acp_ch_t ch, void * buf, size_t size)"

.PP
Non-Blocking send via channels\&. Starts a nonblocking send of a message through the channel specified by the handle\&. It returns error if the sender of the channel endpoint specified by the handle is not the caller process\&. Otherwise, it returns a handle of the request for waiting the completion of the nonblocking send\&.
.PP
\fBParameters:\fP
.RS 4
\fIch\fP Handle of the channel endpoint to send a message\&. 
.br
\fIbuf\fP Initial address of the send buffer\&. 
.br
\fIsize\fP Size in byte of the message\&. 
.RE
.PP
\fBReturn values:\fP
.RS 4
\fIACP_REQUEST_NULL\fP Fail 
.br
\fIotherwise\fP A handle of the request for waiting the completion of this operation\&. 
.RE
.PP

.SS "int64_t acp_query_segbuf_head (acp_segbuf_t segbuf)"

.PP
Query the head index of the segmented buffer\&. Return the index that points to the head of the segmented buffer\&. Head represents the position in a segmented buffer from which valid data in the segmented buffer begins\&.
.PP
\fBParameters:\fP
.RS 4
\fIsegbuf\fP Handle of the segmented buffer\&. 
.RE
.PP
\fBReturn values:\fP
.RS 4
\fI-1\fP Head index is not available\&. 
.br
\fIotherwise\fP The index of the head\&. 
.RE
.PP

.SS "int64_t acp_query_segbuf_sent (acp_segbuf_t segbuf)"

.PP
Query the index that represents the point where data has been already sent\&. Return the index that points to the position in the segmented buffer until which the data transfer has been completed\&. This function is only available to the source rank, because this function is used to check whether some of the segments at the source side can be overwritten with the new value\&.
.PP
\fBParameters:\fP
.RS 4
\fIsegbuf\fP Handle of the segmented buffer\&. 
.RE
.PP
\fBReturn values:\fP
.RS 4
\fI-1\fP Sent index is not available\&. 
.br
\fIotherwise\fP The index of the sent\&. 
.RE
.PP

.SS "int64_t acp_query_segbuf_tail (acp_segbuf_t segbuf)"

.PP
Query the tail index of the segmented buffer\&. Return the index that points to the tail of the segmented buffer\&. Tail represents the position in a segmented buffer until which valid data in the segmented buffer begins\&.
.PP
\fBParameters:\fP
.RS 4
\fIsegbuf\fP Handle of the segmented buffer\&. 
.RE
.PP
\fBReturn values:\fP
.RS 4
\fI-1\fP Tail index is not available\&. 
.br
\fIotherwise\fP The index of the tail\&. 
.RE
.PP

.SS "int acp_ready_segbuf (acp_segbuf_t segbuf)"

.PP
Notify to the source side that one segment has become ready to be overwritten\&. Notify from the destination side to the source side that one segment at the head has become ready to be overwritten\&. At the creation of the endpoint, all segments had been initialized as ready to be overwritten\&. Then, segments become not ready by acp_ack_segbuf function\&. acp_ready_segbuf sets the segment at the head to be ready again, and increments the head of the segmented buffer by one\&.
.PP
\fBParameters:\fP
.RS 4
\fIsegbuf\fP Handle of the segmented buffer\&. 
.RE
.PP
\fBReturn values:\fP
.RS 4
\fI0\fP Success 
.br
\fI1\fP Fail 
.RE
.PP

.SS "size_t acp_wait_ch (acp_request_t request)"

.PP
Waits for the completion of the nonblocking operation\&. Waits for the completion of the nonblocking operation specified by the request handle\&. If the operation is a nonblocking receive, it retruns the size of the received data\&.
.PP
\fBParameters:\fP
.RS 4
\fIrequest\fP Handle of the request of a nonblocking operation\&. 
.RE
.PP
\fBReturn values:\fP
.RS 4
\fI>=0\fP Success\&. if the operation is a nonblocking receive, the size of the received data\&. 
.br
\fI-1\fP Fail 
.RE
.PP

.SH "Author"
.PP 
Generated automatically by Doxygen for ACP Library from the source code\&.
